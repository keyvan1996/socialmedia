{"ast":null,"code":"var _jsxFileName = \"/Users/keyvanshabani/My-Files/codes/social-website/client/src/components/comments/Comments.jsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useState } from \"react\";\nimport { AuthContext } from \"../../context/authContext\";\nimport \"./comments.scss\";\nimport { useQuery } from \"react-query\";\nimport { makeRequest } from \"../../axios\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Comments = _ref => {\n  _s();\n\n  let {\n    postId\n  } = _ref;\n  const [desc, useDesc] = useState();\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const queryClient = useQueryClient();\n  const mutation = useMutation(newComment => {\n    return makeRequest.post(\"/comments\", newComment);\n  }, {\n    onSuccess: () => {\n      // Invalidate and refetch\n      queryClient.invalidateQueries(\"comments\");\n    }\n  });\n\n  const handleClick = async e => {\n    e.preventDefault();\n    mutation.mutate({\n      desc,\n      postId\n    });\n    setDesc(\"\");\n  };\n\n  const {\n    isLoading,\n    error,\n    data\n  } = useQuery([\"comments\"], () => makeRequest.get(\"/comments?postId=\" + postId).then(res => {\n    return res.data;\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"write\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: currentUser.profilePic,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Write a comment\",\n        onChange: e.target.value,\n        value: desc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClick,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), isLoading ? \"Loading\" : data.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: comment.profilePicture,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: comment.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: comment.desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"date\",\n        children: moment(comment.createdAt).fromNow()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Comments, \"ctOICBEi0e9CZlorXVeJ1hQbncA=\", true, function () {\n  return [useQuery];\n});\n\n_c = Comments;\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"sources":["/Users/keyvanshabani/My-Files/codes/social-website/client/src/components/comments/Comments.jsx"],"names":["useContext","useState","AuthContext","useQuery","makeRequest","moment","Comments","postId","desc","useDesc","currentUser","queryClient","useQueryClient","mutation","useMutation","newComment","post","onSuccess","invalidateQueries","handleClick","e","preventDefault","mutate","setDesc","isLoading","error","data","get","then","res","profilePic","target","value","map","comment","profilePicture","name","createdAt","fromNow"],"mappings":"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","sourcesContent":["import { useContext, useState } from \"react\";\nimport { AuthContext } from \"../../context/authContext\";\nimport \"./comments.scss\";\nimport { useQuery } from \"react-query\";\nimport { makeRequest } from \"../../axios\";\nimport moment from \"moment\";\n\nconst Comments = ({ postId }) => {\n  const [desc, useDesc] = useState();\n  const { currentUser } = useContext(AuthContext);\n\n  const queryClient = useQueryClient();\n\n  const mutation = useMutation(\n    (newComment) => {\n      return makeRequest.post(\"/comments\", newComment);\n    },\n    {\n      onSuccess: () => {\n        // Invalidate and refetch\n        queryClient.invalidateQueries(\"comments\");\n      },\n    }\n  );\n\n  const handleClick = async (e) => {\n    e.preventDefault();\n    mutation.mutate({ desc, postId });\n    setDesc(\"\");\n  };\n\n  const { isLoading, error, data } = useQuery([\"comments\"], () =>\n    makeRequest.get(\"/comments?postId=\" + postId).then((res) => {\n      return res.data;\n    })\n  );\n  return (\n    <div className=\"comments\">\n      <div className=\"write\">\n        <img src={currentUser.profilePic} alt=\"\" />\n        <input\n          type=\"text\"\n          placeholder=\"Write a comment\"\n          onChange={e.target.value}\n          value={desc}\n        />\n        <button onClick={handleClick}>Send</button>\n      </div>\n      {isLoading\n        ? \"Loading\"\n        : data.map((comment) => (\n            <div className=\"comment\">\n              <img src={comment.profilePicture} alt=\"\" />\n              <div className=\"info\">\n                <span>{comment.name}</span>\n                <p>{comment.desc}</p>\n              </div>\n              <span className=\"date\">\n                {moment(comment.createdAt).fromNow()}\n              </span>\n            </div>\n          ))}\n    </div>\n  );\n};\n\nexport default Comments;\n"]},"metadata":{},"sourceType":"module"}